plugins {
    id 'org.springframework.boot' version '2.7.5'
    id 'io.spring.dependency-management' version '1.1.0'
    id 'java'
    id "org.owasp.dependencycheck" version "7.3.0"
    id 'com.github.spotbugs' version '5.0.13'
    id 'war'
}

group = 'it.gov.innovazione'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation('org.springframework.boot:spring-boot-starter-web') {
        exclude group: 'org.yaml'
    }

    providedRuntime('org.springframework.boot:spring-boot-starter-tomcat')

    implementation 'org.apache.jena:apache-jena-libs:4.6.1'
    constraints {
        implementation ('com.google.protobuf:protobuf-java:3.21.8') {
            because 'previous versions have security bugs'
        }
    }

    implementation 'org.apache.tomcat.embed:tomcat-embed-jasper'
    implementation 'org.apache.commons:commons-text:1.10.0'

    implementation 'org.apache.taglibs:taglibs-standard-spec:1.2.5'
    implementation 'org.apache.taglibs:taglibs-standard-impl:1.2.5'
    implementation 'org.apache.taglibs:taglibs-standard-jstlel:1.2.5'
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

spotbugsMain {
    excludeFilter = file("${rootProject.projectDir}/config/spotbugs/exclude-filter.xml")

    reports {
        html {
            enabled = true
            destination = file("$buildDir/reports/spotbugs/main/spotbugs.html")
        }
    }
}

spotbugsTest {
    excludeFilter = file("${rootProject.projectDir}/config/spotbugs/exclude-filter.xml")
    reports {
        html {
            enabled = true
            destination = file("$buildDir/reports/spotbugs/test/spotbugs.html")
        }
    }
}

dependencyCheck {
    skipConfigurations = ['spotbugs']

//set up a quality gate for vulnerabilities with high severity level:
//let's consider that a vulnerability has a high severity level if its CVSS score is higher than 7
//the build is going to fail if vulnerabilities with high severity level found
    failBuildOnCVSS = 7

//specify a list of known issues which contain:
//false-positives
//confirmed vulnerabilities which are not fixed yet, but we have a ticket for that
    suppressionFile = 'config/dependency-check/dependency-check-known-issues.xml'
}

gradle.taskGraph.whenReady { graph ->
    if (graph.hasTask(build)) {
        spotbugsMain.enabled = false
        dependencyCheckAnalyze.enabled = false
        spotbugsTest.enabled = false
    }
}

bootWar {
    enabled = true
    archiveName("lodview.war")
}

tasks.named('test') {
    useJUnitPlatform()
}
